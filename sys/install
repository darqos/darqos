#! /bin/bash
# DarqOS
# Copyright (C) 2023-2024 David Arnold

# This script will install an unpacked DarqOS distribution, typically
# in the /darq/dist directory, into the system directory, typically /darq.
#
# In addition, it will
# - install any required Linux (Debian) packages
# - create or update any required Linux configuration files
# - create or update systemd units for Darq services
# - install all needed Python packages
#
# After successful completion, the target system will be ready to
# start (or restart) the updated Darq system.

# At this point, a new system version is available in /darq/dist.  We
# need to copy its components into /darq proper, and restart anything
# that needs to.

# At some point this needs to become more sophisticated.  It should
# determine whether it's doing an update or an install, and alter its
# behaviour.
#
# For an install, it should start up Wayland & Wayfire, and possibly
# the storage service (?), and then start the GUI install program.  Or,
# in the short term, start up a text-based installer?  Either way, it
# needs to collect information about locale, keyboard layout, timezone,
# WiFi, etc, and persist these somewhere (possibly a file, possibly in
# storage).  For upgrades, this step should be skipped, and the persisted
# values used instead.
#
# Similarly, for a new install, there's no need to stop running services.
#
# The various locations, install/update mode, and perhaps a "devmode"
# flag should be passed from dui into install as command-line parameters.
#
# This script should also probably deal with the differences between
# RPi4, RPi400, RPi5, and a Unix laptop (and maybe Mobian as well?).
# That might require per-platform sub-scripts?  Or functions?  Something,
# anyway.
#
# We also need to decide about logging.  It's bad enough that dui just
# writes to stdout/stderr.  That's better than nothing though.


DARQ=/darq
DIST=$DARQ/dist
SERVICES="history index metadata security storage terminal type"

# Shut down DarqOS
# FIXME: what's actually needed here?
# FIXME: use systemd target?

# Check for raspi-conf utility.
if [ ! -x /usr/bin/raspi-config ]; then
    echo "Error: unable to find /usr/bin/raspi-config utility" >&2
    exit 1
fi

# Check raspi-config localisation defaults.
# - Locale
sudo raspi-config nonint do_change_locale C.UTF-8
export LANG="C.UTF-8"
echo "Ok: set default locale (C.UTF-8)"

# - Timezone
sudo raspi-config nonint do_change_timezone Australia/Sydney
echo "Ok: set default timezone (Australia/Sydney)"

# - Keyboard layout
sudo raspi-config nonint do_configure_keyboard us
echo "Ok: set default keyboard layout (us)"

# - WiFi location
sudo raspi-config nonint do_wifi_country AU
echo "Ok: set WiFi country (AU)"

# Check raspi-config set for auto-login
# B1: console, login required
# B2: console, login automatically
# B3: GUI, login required
# B4: GUI, login automatically
sudo raspi-config nonint do_boot_behaviour B2
echo "Ok: set default boot behaviour"

# Check raspi-config SSH access is enabled (for now, at least).
sudo raspi-config nonint do_ssh 0
echo "Ok: enabled SSH server"

# Disable splash screen on boot.
sudo raspi-config nonint do_boot_splash 1
echo "Ok: disabled boot splash"

# Enable Wayland
sudo raspi-config nonint do_wayland W2
echo "Ok: enabled Wayland"

# Disable screen blanking.
sudo raspi-config nonint do_blanking 1
echo "Ok: disabled screen blanking"

# FIXME: network config is done via nmcli

# FIXME: Create or update configuration files

# Update OS.
# NOTE: Assume we start from RasPiOS Lite image.
apt-get update
apt-get -u -y dist-upgrade
apt autoremove

# Install any required Debian packages
apt-get install \
        foot \
        python3.11-venv \
        python3-pyqt5 \
        qtwayland5 \
        libgl1-mesa-dri \
        wayfire

        # Has way too many dependencies for a style, so see pip packages
        # python3-qdarkstyle


# Create virtual environment if it doesn't exist
cd $DARQ
if [ ! -d $DARQ/env ]; then
    python3.11 -m venv --system-site-packages env
fi

# Install or update Python modules
. env/bin/activate
pip install --upgrade \
    orjson \
    pillow \
    pyqtdarktheme \
    vobject
echo "Ok: installed Python module dependencies"

pip install --force-reinstall \
    $DIST/darq/lib/darq-0.1-py3-none-any.whl
echo "Ok: installed darqos Python runtime"

# Install p-Kernel
(
    cd "$DIST/darq/kernel"
    mkdir -p "$DARQ/kernel"
    cp -p ./*.py "$DARQ/kernel/"
    cp -p darqos-pkernel "$DARQ/kernel/"
    chmod +x "$DARQ/kernel/darqos-pkernel"

    cp -p darqos.target darqos-pkernel.service "$DARQ/kernel/"
    systemctl link "$DARQ/kernel/darqos-pkernel.service"
    systemctl link "$DARQ/kernel/darqos.target"
    echo "Installed p-Kernel"
)

# Install services.
(
    cd "$DIST/darq/services"
    for f in $SERVICES ; do
        mkdir -p "$DARQ/services/$f"
        cp -p "$f"/*.py "$f/darqos-$f" "$f/darqos-$f.service" "$DARQ/services/$f/"
        chmod +x "$DARQ/services/$f/darqos-$f"

        systemctl link "$DARQ/services/$f/darqos-$f.service"
        echo "Installed service: darqos-$f"
    done
)

# Restart DarqOS
#systemctl set-default darqos.target
#systemctl default

# FIXME: what needs to be restarted?
# FIXME: OS? (in which case, don't worry about services)
# FIXME: just services? (iterate over list, and restart them)

